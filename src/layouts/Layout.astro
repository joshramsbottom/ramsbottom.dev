---
export interface Props {
    title: string;
}

const { title } = Astro.props as Props;

function generateRandomChannel() {
    return Math.floor(Math.random() * 256);
}

type RgbColor = {
    r: number;
    g: number;
    b: number;
};

function generateRandomColor(): RgbColor {
    return {
        r: generateRandomChannel(),
        g: generateRandomChannel(),
        b: generateRandomChannel(),
    };
}

type HsvColor = {
    h: number;
    s: number;
    v: number;
};

function rgbToHsv({ r, g, b }: RgbColor): HsvColor {
    const max = Math.max(r, g, b);
    const delta = max - Math.min(r, g, b);

    const hh = delta
        ? max === r
            ? (g - b) / delta
            : max === g
            ? 2 + (b - r) / delta
            : 4 + (r - g) / delta
        : 0;

    return {
        h: 60 * (hh < 0 ? hh + 6 : hh),
        s: max ? (delta / max) * 100 : 0,
        v: (max / 255) * 100,
    };
}

function hsvToRgb({ h, s, v }: HsvColor): RgbColor {
    h = (h / 360) * 6;
    s = s / 100;
    v = v / 100;

    const hh = Math.floor(h),
        b = v * (1 - s),
        c = v * (1 - (h - hh) * s),
        d = v * (1 - (1 - h + hh) * s),
        module = hh % 6;

    return {
        r: Math.round([v, c, b, b, d, v][module] * 255),
        g: Math.round([d, v, v, c, b, b][module] * 255),
        b: Math.round([b, b, d, v, v, c][module] * 255),
    };
}

function getComplimentaryColor(hsv: HsvColor): HsvColor {
    const { h, s, v } = hsv;
    const rotatedHue = h > 180 ? h - 180 : 360 + h - 180;

    return {
        h: rotatedHue,
        s,
        v,
    };
}

function rgbToCss({ r, g, b }: RgbColor): string {
    return `rgb(${r} ${g} ${b})`;
}

const foregroundColorRgb = generateRandomColor();
const backgroundColorRgb = hsvToRgb(
    getComplimentaryColor(rgbToHsv(foregroundColorRgb))
);

const foregroundColor = rgbToCss(foregroundColorRgb);
const backgroundColor = rgbToCss(backgroundColorRgb);
---

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <title>{title}</title>
    </head>
    <body>
        <slot></slot>
        <style define:vars={{ foregroundColor, backgroundColor }}>
            :root {
                --font-size-base: clamp(1rem, 0.34vw + 0.91rem, 1.19rem);
                --font-size-lg: clamp(1.2rem, 0.7vw + 1.2rem, 1.5rem);
                --font-size-xl: clamp(2.44rem, 2.38vw + 1.85rem, 3.75rem);
            }

            html {
                font-family: system-ui, sans-serif;
                font-size: var(--font-size-base);
                color: var(--foregroundColor);
                background-color: var(--backgroundColor);
                height: 100%
            }

            body {
                margin: 0;
                width: 100vw;
                height: 100%;
            }

            :global(h1) {
                font-size: var(--font-size-xl);
            }

            :global(h2) {
                font-size: var(--font-size-lg);
            }
        </style>
    </body>
</html>
